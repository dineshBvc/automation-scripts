#!/usr/bin/env python3

### Author: sDK
### Date: 18-Oct-24 15:21
### License : MIT

import os
import boto3
import logging
from datetime import datetime
from botocore.exceptions import NoCredentialsError, PartialCredentialsError, BotoCoreError

logging.basicConfig(filename='bvcDbBackup.log', level=logging.INFO, 
                    format='%(asctime)s:%(levelname)s:%(message)s')
                    
# IAM Role is automagically provisioned for this EC2 instance. (IAM Role - Auto-Rotates)
# Retrieve database details from environment variables
# TODO: Store & Pull DB Creds from AWS Secrets Manager. Helps with auto rotation.

DB_NAME = os.getenv('DB_NAME')
DB_USER = os.getenv('DB_USER')
DB_PASS = os.getenv('DB_PASS')
DB_HOST = os.getenv('DB_HOST')
BUCKET_NAME = 'bvccms-db-backup'

def backup_database():
    backup_file = f"{DB_NAME}_{datetime.now().strftime('%Y%m%d%H%M%S')}.sql"
    dump_command = f"mysqldump -h {DB_HOST} -u {DB_USER} -p{DB_PASS} {DB_NAME} > {backup_file}"
    dump_status = os.system(dump_command)
    if dump_status != 0:
        logging.error("mysqldump FAILed")
        return None
    logging.info(f"Backup OKAY: {backup_file}")
    return backup_file

def upload_to_s3(file_name):
    s3 = boto3.client('s3')
    try:
        s3.upload_file(file_name, BUCKET_NAME, file_name)
        logging.info(f"Upload OKAY: {file_name}")
    except (NoCredentialsError, PartialCredentialsError, BotoCoreError) as e:
        logging.error(f"Upload ERROR: {e}")
        return False
    return True
    
if __name__ == "__main__":
    backup_file = backup_database()
    if backup_file:
        if upload_to_s3(backup_file):
            os.remove(backup_file)
            logging.info(f"Backup file deleted: {backup_file}")
        else:
            logging.error("Backup file NOT deleted due to upload failure.")
    else:
        logging.error("Backup FAILed. Nothing uploaded")
